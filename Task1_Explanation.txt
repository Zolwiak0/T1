Explanation to Task1
Task 1provided some basic requirements for VendorMachine in java.
My first thought was finding similarities between that concept and simple arduino devices that do "some stuff".
This drives me to some virtual representation of physical machine than solving problem in a strict OOP way (I think).
From the perspective I see that the solution for that program could be implementation of State design pattern.
About implementation of requirements and construction of program.
Machine are based on few component that represents different decision points/elements.


- ProductSelector - provides a main loop with display goods for customers.
(Requirement 2: Allow user to select products Water(40), Crisp(65), Chocolate(75))
Lists of products are stored in different components, this provides some flexibility to implement changes.


Users can stop that loop by selecting some product that triggers another loop.
- CoinCollector - this part represents the device and logic behind the payment process.
(Requirement 1: Accepts coins of 1,5,10,25) - this requirement can be extended to: how force users to use right coins can we trust that everything the user provided is a coin.
For that reason vm checks if input is coin (integer) and is acceptable coin, everything else is returned.


(Requirement 3: Allow users to take a refund by canceling the request.
In any time user can return from payment to products election


(Requirement 4: Return selected product and remaining change if any.
Another requirement that can be expended:
- do machine have right quantity of product (not implemented)
- how many coins' machines have for change, can coins from customers be used?


Partial implemented:
-for start I assume that machine will have some sum of coins (1value)  only for changes.
-Coins from customers will be stored in other component ( for financial reason machine will note each transaction :))


- what to do if don't have enough coins for change
- Implemented, machine will return coins and ask for different


(Requirement 5 Allow reset operation for vending machine suppliers.
- Implemented by pressing "@" component InputReader trigger entire initialization once again.


I have tried to use dependencies injection approach that could be helpful in the future.
Some traps I made were the use of private methods, from one side it increases the level of encapsulation but makes code harder to test.


As of the tests, this "machine" runs in a constant loop between states for this best approach for design test would be flow chart.


I don't see benefits of providing unit tests for everything, even internal lists or any other small core components.
Provided tests checks parts of flow and single component behavior.
Coverage around 70% of methods due to fact not all are used (conception goes on :))
Worth mentioning is part of what should be improved, due to lack of output cleaning at this point tests must be run separately.


-----
Basic instruction for input:
-----
In nost parts user can type anything.
COINS are INTEGERS, anything else is not a coin
'return' - allow to move from payment to product selection
'@' - reset machine

To Run program run Class: mainClass



